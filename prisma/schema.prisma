generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Issue {
  id                  String               @id @default(cuid())
  title               String
  description         String?
  priority            Priority             @default(MEDIUM)
  status              Status               @default(OPEN)
  assignedTo          String?
  archived            Boolean              @default(false)
  archivedAt          DateTime?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  categoryId          String?
  resolutionPlan      String?
  roadblocks          String?
  usersInvolved       String?
  workPerformed       String?
  workOrganization    String?
  actionItemsText     String?  @db.Text // Rich text for action items
  actionItems         ActionItem[]
  originalActionItems ActionItem[] @relation("OriginalActionItems")
  cmicTicketClosed    Boolean              @default(false)
  cmicTicketNumber    String?
  cmicTicketOpened    DateTime?
  procoreTicketNumber String?
  procoreTicketOpened DateTime?
  procoreTicketClosed Boolean              @default(false)
  additionalHelp      String?
  additionalHelpNotes AdditionalHelpNote[]
  cmicNotes           CmicNote[]
  emailIssues         EmailIssue[]
  category            Category?            @relation(fields: [categoryId], references: [id])
  meetingItems        MeetingItem[]
  notes               Note[]
  zendeskTickets      ZendeskTicket[]

  @@map("issues")
}

model CmicNote {
  id        String   @id @default(cuid())
  issueId   String
  content   String
  author    String?
  createdAt DateTime @default(now())
  issue     Issue    @relation(fields: [issueId], references: [id], onDelete: Cascade)

  @@map("cmic_notes")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  color       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  issues      Issue[]

  @@map("categories")
}

model Note {
  id        String   @id @default(cuid())
  issueId   String
  content   String
  author    String?
  createdAt DateTime @default(now())
  issue     Issue    @relation(fields: [issueId], references: [id], onDelete: Cascade)

  @@map("notes")
}

model ActionItem {
  id              String   @id @default(cuid())
  issueId         String?
  originalIssueId String?
  title           String
  description     String?
  completed       Boolean  @default(false)
  priority        Int      @default(0)
  dueDate         DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  issue           Issue?   @relation(fields: [issueId], references: [id], onDelete: Cascade)
  originalIssue   Issue?   @relation("OriginalActionItems", fields: [originalIssueId], references: [id], onDelete: SetNull)

  @@map("action_items")
}

model AdditionalHelpNote {
  id        String   @id @default(cuid())
  issueId   String
  content   String
  author    String?
  createdAt DateTime @default(now())
  issue     Issue    @relation(fields: [issueId], references: [id], onDelete: Cascade)

  @@map("additional_help_notes")
}

model Meeting {
  id           String        @id @default(cuid())
  title        String
  meetingDate  DateTime
  agenda       String?
  minutes      String?
  actionItems  String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  endedAt      DateTime?
  externalHelp String?
  generalNotes String?
  startedAt    DateTime?
  status       MeetingStatus @default(PLANNED)
  meetingItems MeetingItem[]

  @@map("meetings")
}

model MeetingItem {
  id              String   @id @default(cuid())
  meetingId       String
  issueId         String
  discussionNotes String?
  actionItems     String?
  addedAt         DateTime @default(now())
  carriedOver     Boolean  @default(false)
  issue           Issue    @relation(fields: [issueId], references: [id], onDelete: Cascade)
  meeting         Meeting  @relation(fields: [meetingId], references: [id], onDelete: Cascade)

  @@unique([meetingId, issueId])
  @@map("meeting_items")
}

model EmailTemplate {
  id          String             @id @default(cuid())
  name        String
  description String?
  subject     String
  content     String
  variables   String? // JSON string of template variables
  isDefault   Boolean            @default(false)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  emailDrafts EmailDraft[]

  @@map("email_templates")
}

model EmailDraft {
  id            String        @id @default(cuid())
  subject       String
  content       String
  recipients    String? // JSON array of recipients
  templateId    String?
  sentAt        DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  emailIssues   EmailIssue[]
  template      EmailTemplate? @relation(fields: [templateId], references: [id])

  @@map("email_drafts")
}

model EmailIssue {
  id           String     @id @default(cuid())
  emailDraftId String
  issueId      String
  emailDraft   EmailDraft @relation(fields: [emailDraftId], references: [id], onDelete: Cascade)
  issue        Issue      @relation(fields: [issueId], references: [id], onDelete: Cascade)

  @@unique([emailDraftId, issueId])
  @@map("email_issues")
}

model ZendeskTicket {
  id              String                @id @default(cuid())
  zendeskId       Int                   @unique // The actual Zendesk ticket ID
  subject         String
  description     String?
  status          ZendeskTicketStatus
  priority        ZendeskTicketPriority
  ticketType      ZendeskTicketType
  requesterEmail  String?
  assigneeEmail   String?
  tags            String? // JSON array of tags
  customFields    String? // JSON object of custom field values
  createdAt       DateTime
  updatedAt       DateTime
  lastSyncedAt    DateTime              @default(now())
  isERPRelated    Boolean               @default(false)
  linkedIssueId   String? // Link to ERP Issue if related
  linkedIssue     Issue?                @relation(fields: [linkedIssueId], references: [id])

  @@map("zendesk_tickets")
}

enum ZendeskTicketStatus {
  NEW
  OPEN
  PENDING
  HOLD
  SOLVED
  CLOSED
}

enum ZendeskTicketPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum ZendeskTicketType {
  PROBLEM
  INCIDENT
  QUESTION
  TASK
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum Status {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum MeetingStatus {
  PLANNED
  ACTIVE
  COMPLETED
}
